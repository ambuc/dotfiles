" David Zmick's vimrc (dpzmick)
" Do whatever you want with this

set nocompatible

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin("~/.vim/plugged/")

" Generally useful plugins
Plug 'Shougo/vimproc.vim', {'do': 'make'}
Plug 'Shougo/neomru.vim'
Plug 'Shougo/unite.vim'
Plug 'Shougo/unite-outline'
Plug 'altercation/vim-colors-solarized'
Plug 'mhinz/vim-signify'
Plug 'kshenoy/vim-signature'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/a.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'rking/ag.vim'
Plug 'junegunn/vim-easy-align'
" Plug 'tpope/vim-projectionist'
" Plug 'tpope/vim-dispatch'
" Plug 'christoomey/vim-tmux-runner'
" Plug 'benekastah/neomake'

" snippets
Plug 'SirVer/ultisnips'

" Generally useful programming plugins
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-commentary'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-fugitive'
Plug 'Raimondi/delimitMate'
Plug 'bronson/vim-trailing-whitespace'

" python
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'ervandew/supertab', {'for': 'python'}

" stuff for haskell
Plug 'eagletmt/ghcmod-vim'
Plug 'int3/vim-extradite'
Plug 'eagletmt/neco-ghc'

" for lisp (ugh)
Plug 'luochen1990/rainbow'
Plug 'wlangstroth/vim-racket'

" for c
Plug 'bruno-/vim-man'

" for js
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'othree/html5.vim'
Plug 'digitaltoad/vim-jade'

" Integration with tmux
" Plug 'christoomey/vim-tmux-navigator'

" Integration with dvtm
Plug 'dpzmick/vim-dvtm-navigator'

" autocomplete
Plug 'Valloric/YouCompleteMe', {'do': './install.sh --clang-completer'}

call plug#end()

" for ocaml merlin
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

" Also run the following line in vim to index the documentation:
execute "helptags " . g:opamshare . "/merlin/vim/doc"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on

" automatically read a file when changed
set autoread

" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" store all swap files in home
silent !mkdir ~/.vim/swaps > /dev/null 2>&1
set swapfile
set dir=~/.vim/swaps

" keeps buffers open but hidden when not in use
set hidden

" spelling
set spell
setlocal spell spelllang=en_us

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" show incomplete commands
set showcmd

" always show a ruler
set ruler
set backspace=eol,start,indent

" ignorecase, but be smart about it
set ignorecase
set smartcase

" highlight search results
set hlsearch

" be incremental, like most web browsers
set incsearch

" use regex magic
set magic

" show matching brackets
set showmatch

" don't be annoying
set noerrorbells
set novisualbell

" use the mouse
set mouse=a
" hide the mouse while typing
set mousehide

" keep cursor in the middle of the screen
set scrolloff=5

" use wild menu
set wildmenu
set wildmode=list:longest

set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax, Colors, and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" enable syntax highlighting
syntax enable

" Set colorscheme
set background=dark

" if the terminal you are using doesn't support solarized use this
"let g:solarized_termcolors = 256

colorscheme solarized

" Make the SignColumn not look obnoxious
highlight clear SignColumn

" Encoding
set encoding=utf8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs and Indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Spaces, such that tab = 4 spaces
set shiftwidth=4
set tabstop=4
set expandtab

" but try to be smart about tabs
set smarttab

" Lets use 80 character lines
set textwidth=80
if exists("&colorcolumn")
    set colorcolumn=+1 " and show a pretty line
endif

" smart + auto indent
set smartindent
set autoindent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2 "make sure status line always shows up
so ~/.vim/custom/status.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=","

" <Leader>W removes trailing whitespace from all lines that have it
nmap <silent> <Leader>W :FixWhitespace<CR>

" clear the last search
nmap <silent> <Leader>C :noh<CR>

" Make jk escape
inoremap jk <Esc>
" vnoremap jk <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Man.vim
map K <Plug>(Man)

" Haskell stuff
let g:haskell_conceal_wide = 0 " The little arrow is nice though! :(

" C stuff
" Make vim-commentary use // for comments instead of using /* */
autocmd FileType c set commentstring=//\ %s

" syntastic stuff
" Set the format of the status line to stick in status bar
let g:syntastic_stl_format = "%E{E:%e %fe}%B{ }%W{W:%w %fw}"

" jedi-vim
" let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
" let g:jedi#use_splits_not_buffers = "top"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_enable = 0

" latex
let g:tex_conceal="gm"

" unite.vim
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
"call unite#custom#source('file_rec/async','sorters','sorter_rank', )

let g:unite_data_directory             = '~/.vim/.cache/unite'
let g:unite_source_history_yank_enable = 1
let g:unite_split_rule                 = 'botright'

" map control-p to fuzzy search working directory
nnoremap <silent> <c-p> :Unite  -no-split -start-insert file_rec/async<cr>
" map control-o to display open buffers
nnoremap <silent> <c-o> :Unite  -no-split -start-insert buffer<CR>
"map control-t to open a tag viewer
nnoremap <silent> <c-t> :Unite -vertical outline<cr>

" Trigger configuration.
let g:UltiSnipsExpandTrigger       = "<c-f>"
let g:UltiSnipsJumpForwardTrigger  = "<c-f>"
let g:UltiSnipsJumpBackwardTrigger = "<c-d>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" tell delimitmate to always add newlines
let delimitMate_expand_cr=1

" ** will call Ag to find all the occurances in directory
nmap ** :Ag <c-r>=expand("<cword>")<cr><cr>

" hit enter in visual mode to easy align
vmap <Enter> <Plug>(EasyAlign)

" Uncomment the following to have Vim jump to the last position when
" reopening a file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" tmux navigator, saves the file when you switch out of vim
let g:tmux_navigator_save_on_switch = 1

" json vim thinks it gets to conceal quotes, thats stupid
let g:vim_json_syntax_conceal = 0

" YouCompleteMe
" Sets the ycm_extra_conf file (right now is just a file for C)
" TODO set autocmd for different default global you conf files
let g:ycm_global_ycm_extra_conf = '~/.vim/custom/.ycm_extra_conf.py'
autocmd filetype cpp :let g:ycm_global_ycm_extra_conf = "~/.vim/custom/.ycm_extra_conf_cpp.py"

" Lisp/Scheme
autocmd filetype lisp,scheme,art setlocal equalprg=scmindent.rkt

" runs racket on the current file, enters the current file
" kind of (a lot) a hack
function RunRacketVTR()
    let cmd = 'racket -il xrepl -e ''(enter\! "' . expand('%') . '")'''
    :VtrKillRunner
    :VtrOpenRunner
    exec 'VtrSendCommandToRunner' . ' ' . cmd
endfunction

autocmd FileType scheme map <F9> :call RunRacketVTR()<CR>
map <F10> :VtrSendLinesToRunner<CR>

autocmd FileType ocaml map <Leader>t :MerlinTypeOf<CR>
autocmd FileType ocaml call unite#custom#source('file_rec/async', 'ignore_pattern', '_build/')

autocmd FileType javascript map <Leader>t :FlowType<CR>
autocmd FileType javascript call unite#custom#source('file_rec/async', 'ignore_pattern', 'node_modules/')

let loaded_matchparen = 1

set listchars=tab:→\ ,trail:·
nmap <silent> <Leader>L :set list<CR>
nmap <silent> <Leader>LO :set nolist<CR>

" use dvtm plugin
nnoremap <silent> <C-h> :DvtmNavigateLeft<cr>
nnoremap <silent> <C-j> :DvtmNavigateDown<cr>
nnoremap <silent> <C-k> :DvtmNavigateUp<cr>
nnoremap <silent> <C-l> :DvtmNavigateRight<cr>

let g:rainbow_active = 1

let g:syntastic_javascript_checkers = ['eslint']
