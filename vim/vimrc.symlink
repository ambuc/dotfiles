" David Zmick's vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" Generally useful plugins
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/unite-outline'
Plugin 'altercation/vim-colors-solarized'
Plugin 'mhinz/vim-signify'
Plugin 'kshenoy/vim-signature'
Plugin 'itchyny/lightline.vim'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/a.vim'
Plugin 'Lokaltog/vim-easymotion'

" tab completion
Plugin 'ervandew/supertab'

" snippets
Plugin 'SirVer/ultisnips'
" Plugin 'honza/vim-snippets' " going to use my own snippets

" Generally useful programming plugins
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-commentary'
Plugin 'Yggdroot/indentLine'
Plugin 'tpope/vim-fugitive'

" python
Plugin 'davidhalter/jedi-vim'

" stuff for haskell
Plugin 'dag/vim2hs'

" Integration with tmux
Plugin 'christoomey/vim-tmux-navigator'

call vundle#end()
filetype plugin indent on     " required!

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" automatically read a file when changed
set autoread

" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" keeps buffers open but hidden when not in use
set hidden

" spelling
setlocal spell spelllang=en_us

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" show incomplete commands
set showcmd

" always show a ruler
set ruler
set backspace=eol,start,indent

" ignorecase, but be smart about it
set ignorecase
set smartcase

" highlight search results
set hlsearch

" be incremental, like most web browsers
set incsearch

" use regex magic
set magic

" show matching brackets
set showmatch

" time in milliseconds to flash match (default 5)
" set mat=5

" don't be annoying
set noerrorbells
set novisualbell

" use the mouse
set mouse=a

" keep cursor in the middle of the screen
set scrolloff=5

" use wild menu
set wildmenu
set wildmode=list:longest

set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax, Colors, and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" enable syntax highlighting
syntax enable

" Set colorscheme
set background=dark

" if the terminal you are using doesn't support solarized use this
"let g:solarized_termcolors = 256

colorscheme solarized

" Make the SignColumn not look obnoxious
highlight clear SignColumn

" Encoding
set encoding=utf8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs and Indentation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Spaces, such that tab = 4 spaces
set shiftwidth=4
set tabstop=4
set expandtab

" but try to be smart about tabs
set smarttab

" Lets use 80 character lines
set textwidth=80
if exists("&colorcolumn")
    set colorcolumn=+1 " and show a pretty line
endif

" smart + auto indent
set smartindent
set autoindent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2 "make sure status line always shows up
so ~/.vim/custom/status.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=","
" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" TODO clean these up
" <Leader>w finds the first instance of line with
nmap <silent> <Leader>w /\s\+$<CR>:let @/=''<CR>

" <Leader>W removes trailing whitespace from all lines that have it
nmap <silent> <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>

" clear the last search
nmap <silent> <Leader>C :let @/=''<CR>

" Make caps lock escape, then to leave edit mode to a control-j
inoremap jj <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Man pages
source $VIMRUNTIME/ftplugin/man.vim
" use the fancy man page view on Shift-K instead of the crappy one
nmap K :Man <cword><CR>

" Haskell stuff
let g:haskell_conceal_wide = 0 " The little arrow is nice though! :(

" C stuff
" Make vim-commentary use // for comments instead of using /* */
autocmd FileType c set commentstring=//\ %s
command -nargs=* Make make <args> | cwindow 3

" syntastic stuff
" Set the format of the status line to stick in status bar
let g:syntastic_stl_format = "%e Errors: Line %F"

" jedi-vim
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#popup_on_dot = 0
let g:jedi#use_splits_not_buffers = "top"

" latex
let g:tex_conceal="gm"

" unite.vim
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
"call unite#custom#source('file_rec/async','sorters','sorter_rank', )

let g:unite_data_directory='~/.vim/.cache/unite'
let g:unite_source_history_yank_enable = 1
let g:unite_split_rule = 'botright'

nnoremap <silent> <c-p> :Unite  -no-split -start-insert file_rec/async<cr>
nnoremap <silent> <c-o> :Unite  -no-split -start-insert buffer<CR>

nnoremap <silent> <Leader>f :Unite -auto-resize -start-insert file_rec/async -default-action=vsplit<cr>
nnoremap <silent> <Leader>fh :Unite -auto-resize -start-insert file_rec/async -default-action=split<cr>
nnoremap <silent> <leader>y :Unite -no-split -buffer-name=yank history/yank<cr>

nnoremap <silent> <leader>T :Unite -vertical outline<cr>

" TODO figure out fortran
" TODO learn better window managment
"

" Trigger configuration. Do not use <tab> if you use
let g:UltiSnipsExpandTrigger="<c-f>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-d>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
